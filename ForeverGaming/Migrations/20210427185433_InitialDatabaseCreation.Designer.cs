// <auto-generated />
using System;
using ForeverGaming.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ForeverGaming.Migrations
{
    [DbContext(typeof(GameContext))]
    [Migration("20210427185433_InitialDatabaseCreation")]
    partial class InitialDatabaseCreation
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ForeverGaming.Models.Format", b =>
                {
                    b.Property<string>("FormatId")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("FormatId");

                    b.ToTable("Formats");

                    b.HasData(
                        new
                        {
                            FormatId = "ARCADE",
                            Name = "Arcade Game"
                        },
                        new
                        {
                            FormatId = "CONSOLE",
                            Name = "Gaming console"
                        },
                        new
                        {
                            FormatId = "MOBILE",
                            Name = "Mobile Device"
                        },
                        new
                        {
                            FormatId = "PC",
                            Name = "Personal Computer"
                        },
                        new
                        {
                            FormatId = "STREAMING",
                            Name = "Streaming"
                        },
                        new
                        {
                            FormatId = "TV",
                            Name = "Television"
                        },
                        new
                        {
                            FormatId = "VIRTUAL",
                            Name = "Virtual Reality"
                        },
                        new
                        {
                            FormatId = "WEB",
                            Name = "Web Browser"
                        });
                });

            modelBuilder.Entity("ForeverGaming.Models.Game", b =>
                {
                    b.Property<int>("GameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FormatId")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("GameImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GenreId")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("PublisherId")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("RatingId")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("TypeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("GameId");

                    b.HasIndex("FormatId");

                    b.HasIndex("GenreId");

                    b.HasIndex("PublisherId");

                    b.HasIndex("RatingId");

                    b.HasIndex("TypeId");

                    b.ToTable("Games");

                    b.HasData(
                        new
                        {
                            GameId = 1,
                            FormatId = "PC",
                            GameImage = "doom.png",
                            GenreId = "FPS",
                            Name = "Doom",
                            PublisherId = "BETH",
                            RatingId = "M",
                            TypeId = "FPS"
                        },
                        new
                        {
                            GameId = 2,
                            FormatId = "PC",
                            GameImage = "dota2.png",
                            GenreId = "MOBAs",
                            Name = "DOTA 2",
                            PublisherId = "VALVE",
                            RatingId = "E10",
                            TypeId = "MOBA"
                        },
                        new
                        {
                            GameId = 3,
                            FormatId = "CONSOLE",
                            GameImage = "mma.png",
                            GenreId = "SPORT",
                            Name = "EA Sports MMA",
                            PublisherId = "EA",
                            RatingId = "T",
                            TypeId = "CS"
                        },
                        new
                        {
                            GameId = 4,
                            FormatId = "PC",
                            GameImage = "EFT.png",
                            GenreId = "SURVH",
                            Name = "Escape From Tarkov",
                            PublisherId = "BSG",
                            RatingId = "A",
                            TypeId = "SH"
                        },
                        new
                        {
                            GameId = 5,
                            FormatId = "CONSOLE",
                            GameImage = "everquest.png",
                            GenreId = "MMORPG",
                            Name = "EverQuest",
                            PublisherId = "VERANT",
                            RatingId = "T",
                            TypeId = "SRPG"
                        },
                        new
                        {
                            GameId = 6,
                            FormatId = "PC",
                            GameImage = "Fguys.png",
                            GenreId = "STRG",
                            Name = "Fall Guys: Ultimate Knockout",
                            PublisherId = "MEDIA",
                            RatingId = "T",
                            TypeId = "STRATEGY"
                        },
                        new
                        {
                            GameId = 7,
                            FormatId = "PC",
                            GameImage = "F3.png",
                            GenreId = "RPG",
                            Name = "FarCry 3",
                            PublisherId = "UBI",
                            RatingId = "M",
                            TypeId = "RPG"
                        },
                        new
                        {
                            GameId = 8,
                            FormatId = "PC",
                            GameImage = "F4.png",
                            GenreId = "RPG",
                            Name = "FarCry 4",
                            PublisherId = "UBI",
                            RatingId = "M",
                            TypeId = "RPG"
                        },
                        new
                        {
                            GameId = 9,
                            FormatId = "CONSOLE",
                            GameImage = "fifa20.png",
                            GenreId = "SPORT",
                            Name = "FIFA 20",
                            PublisherId = "EATIB",
                            RatingId = "E",
                            TypeId = "SPORT"
                        },
                        new
                        {
                            GameId = 10,
                            FormatId = "CONSOLE",
                            GameImage = "fightnightchampion.png",
                            GenreId = "SPORT",
                            Name = "Fight Night Champion",
                            PublisherId = "EA",
                            RatingId = "M",
                            TypeId = "CS"
                        },
                        new
                        {
                            GameId = 11,
                            FormatId = "CONSOLE",
                            GameImage = "fightnight.png",
                            GenreId = "SPORT",
                            Name = "Fight Night Round 4",
                            PublisherId = "EA",
                            RatingId = "T",
                            TypeId = "CS"
                        },
                        new
                        {
                            GameId = 12,
                            FormatId = "PC",
                            GameImage = "FF.png",
                            GenreId = "RPG",
                            Name = "Final Fantasy XV",
                            PublisherId = "TETSUYA",
                            RatingId = "T",
                            TypeId = "FIGHTING"
                        },
                        new
                        {
                            GameId = 13,
                            FormatId = "CONSOLE",
                            GameImage = "forza.png",
                            GenreId = "SPORT",
                            Name = "Forza Horizon 4",
                            PublisherId = "PLAY",
                            RatingId = "E",
                            TypeId = "RACING"
                        },
                        new
                        {
                            GameId = 14,
                            FormatId = "PC",
                            GameImage = "Gmod.png",
                            GenreId = "PUZZLE",
                            Name = "Garry's Mod",
                            PublisherId = "GARRY",
                            RatingId = "E",
                            TypeId = "PUZZLE"
                        },
                        new
                        {
                            GameId = 15,
                            FormatId = "CONSOLE",
                            GameImage = "granturismo.png",
                            GenreId = "SPORT",
                            Name = "Gran Turismo Sport",
                            PublisherId = "SONY",
                            RatingId = "E",
                            TypeId = "RACING"
                        },
                        new
                        {
                            GameId = 16,
                            FormatId = "PC",
                            GameImage = "GTA3.png",
                            GenreId = "RPG",
                            Name = "Grand Theft Auto 3",
                            PublisherId = "ROCK",
                            RatingId = "A",
                            TypeId = "RPG"
                        },
                        new
                        {
                            GameId = 17,
                            FormatId = "PC",
                            GameImage = "GTA4.png",
                            GenreId = "RPG",
                            Name = "Grand Theft Auto 4",
                            PublisherId = "ROCK",
                            RatingId = "A",
                            TypeId = "RPG"
                        },
                        new
                        {
                            GameId = 18,
                            FormatId = "PC",
                            GameImage = "GTA5.png",
                            GenreId = "RPG",
                            Name = "Grand Theft Auto 5",
                            PublisherId = "ROCK",
                            RatingId = "A",
                            TypeId = "RPG"
                        },
                        new
                        {
                            GameId = 19,
                            FormatId = "PC",
                            GameImage = "GreenH.png",
                            GenreId = "SURVH",
                            Name = "Green Hell",
                            PublisherId = "CREEP",
                            RatingId = "M",
                            TypeId = "SH"
                        },
                        new
                        {
                            GameId = 20,
                            FormatId = "PC",
                            GameImage = "H3.png",
                            GenreId = "FPS",
                            Name = "HALO 3",
                            PublisherId = "343IND",
                            RatingId = "T",
                            TypeId = "FPS"
                        },
                        new
                        {
                            GameId = 21,
                            FormatId = "PC",
                            GameImage = "H4.png",
                            GenreId = "FPS",
                            Name = "HALO 4",
                            PublisherId = "343IND",
                            RatingId = "T",
                            TypeId = "FPS"
                        },
                        new
                        {
                            GameId = 22,
                            FormatId = "PC",
                            GameImage = "Hreach.png",
                            GenreId = "FPS",
                            Name = "HALO Reach",
                            PublisherId = "343IND",
                            RatingId = "T",
                            TypeId = "FPS"
                        },
                        new
                        {
                            GameId = 23,
                            FormatId = "PC",
                            GameImage = "HD.png",
                            GenreId = "STRG",
                            Name = "HD Poker",
                            PublisherId = "GOOGLE",
                            RatingId = "A",
                            TypeId = "STRATEGY"
                        },
                        new
                        {
                            GameId = 24,
                            FormatId = "PC",
                            GameImage = "heroesofnewerth.png",
                            GenreId = "MOBAs",
                            Name = "Heroes of Newerth",
                            PublisherId = "FROST",
                            RatingId = "T",
                            TypeId = "MOBA"
                        },
                        new
                        {
                            GameId = 25,
                            FormatId = "PC",
                            GameImage = "heroes.png",
                            GenreId = "MOBAs",
                            Name = "Heroes of the Storm",
                            PublisherId = "BOHEM",
                            RatingId = "T",
                            TypeId = "MOBA"
                        },
                        new
                        {
                            GameId = 26,
                            FormatId = "PC",
                            GameImage = "Kovaak.png",
                            GenreId = "TFPS",
                            Name = "Kovaak 2.0",
                            PublisherId = "TMETA",
                            RatingId = "T",
                            TypeId = "TFPS"
                        },
                        new
                        {
                            GameId = 27,
                            FormatId = "PC",
                            GameImage = "league.png",
                            GenreId = "MOBAs",
                            Name = "League of Legends",
                            PublisherId = "RIOT",
                            RatingId = "E10",
                            TypeId = "MOBA"
                        },
                        new
                        {
                            GameId = 28,
                            FormatId = "CONSOLE",
                            GameImage = "maddennfl.png",
                            GenreId = "SPORT",
                            Name = "Madden NFL",
                            PublisherId = "EATIB",
                            RatingId = "E",
                            TypeId = "SPORT"
                        },
                        new
                        {
                            GameId = 29,
                            FormatId = "PC",
                            GameImage = "Metro.png",
                            GenreId = "RTS",
                            Name = "Metro Exodus",
                            PublisherId = "A4GAMES",
                            RatingId = "M",
                            TypeId = "RTS"
                        },
                        new
                        {
                            GameId = 30,
                            FormatId = "PC",
                            GameImage = "MFS.png",
                            GenreId = "SIMUL",
                            Name = "Microsoft Flight Simulator",
                            PublisherId = "ASOBO",
                            RatingId = "E",
                            TypeId = "SIM"
                        },
                        new
                        {
                            GameId = 31,
                            FormatId = "MOBILE",
                            GameImage = "mobile.png",
                            GenreId = "MOBAs",
                            Name = "Mobile Legends",
                            PublisherId = "MOON",
                            RatingId = "T",
                            TypeId = "MOBA"
                        },
                        new
                        {
                            GameId = 32,
                            FormatId = "PC",
                            GameImage = "Mord.png",
                            GenreId = "MMORPG",
                            Name = "MORDHAU",
                            PublisherId = "TRITER",
                            RatingId = "A",
                            TypeId = "SRPG"
                        },
                        new
                        {
                            GameId = 33,
                            FormatId = "CONSOLE",
                            GameImage = "nbajam.png",
                            GenreId = "SPORT",
                            Name = "NBA Jam",
                            PublisherId = "EATIB",
                            RatingId = "E",
                            TypeId = "SPORT"
                        },
                        new
                        {
                            GameId = 34,
                            FormatId = "PC",
                            GameImage = "Outlast.png",
                            GenreId = "SURVH",
                            Name = "Outlast",
                            PublisherId = "REDBAR",
                            RatingId = "A",
                            TypeId = "SH"
                        },
                        new
                        {
                            GameId = 35,
                            FormatId = "PC",
                            GameImage = "Outlast2.png",
                            GenreId = "SURVH",
                            Name = "Outlast 2",
                            PublisherId = "REDBAR",
                            RatingId = "A",
                            TypeId = "SH"
                        },
                        new
                        {
                            GameId = 36,
                            FormatId = "PC",
                            GameImage = "overwatch.png",
                            GenreId = "FPS",
                            Name = "Overwatch",
                            PublisherId = "BLIZZ",
                            RatingId = "T",
                            TypeId = "FPS"
                        },
                        new
                        {
                            GameId = 37,
                            FormatId = "PC",
                            GameImage = "POE.png",
                            GenreId = "MOBAs",
                            Name = "Path Of Exile",
                            PublisherId = "GGG",
                            RatingId = "T",
                            TypeId = "MOBA"
                        },
                        new
                        {
                            GameId = 38,
                            FormatId = "PC",
                            GameImage = "Phas.png",
                            GenreId = "SURVH",
                            Name = "Phasmophobia",
                            PublisherId = "KINETIC",
                            RatingId = "M",
                            TypeId = "SH"
                        },
                        new
                        {
                            GameId = 39,
                            FormatId = "PC",
                            GameImage = "PUBG.png",
                            GenreId = "FPS",
                            Name = "PUBG PlayersUnknown BattleGround",
                            PublisherId = "DG",
                            RatingId = "A",
                            TypeId = "FPS"
                        },
                        new
                        {
                            GameId = 40,
                            FormatId = "PC",
                            GameImage = "RDR2.png",
                            GenreId = "RPG",
                            Name = "Red Dead Redemption 2",
                            PublisherId = "ROCK",
                            RatingId = "M",
                            TypeId = "RPG"
                        },
                        new
                        {
                            GameId = 41,
                            FormatId = "PC",
                            GameImage = "RE2.png",
                            GenreId = "SURVH",
                            Name = "Resident Evil 2",
                            PublisherId = "CAPCOM",
                            RatingId = "M",
                            TypeId = "SH"
                        },
                        new
                        {
                            GameId = 42,
                            FormatId = "PC",
                            GameImage = "RE3.png",
                            GenreId = "SURVH",
                            Name = "Resident Evil 3 Raccoon City",
                            PublisherId = "CAPCOM",
                            RatingId = "M",
                            TypeId = "SH"
                        },
                        new
                        {
                            GameId = 43,
                            FormatId = "PC",
                            GameImage = "ROE.png",
                            GenreId = "FPS",
                            Name = "Ring of Elysium",
                            PublisherId = "QSX",
                            RatingId = "A",
                            TypeId = "FPS"
                        },
                        new
                        {
                            GameId = 44,
                            FormatId = "PC",
                            GameImage = "SOT.png",
                            GenreId = "RTS",
                            Name = "Sea of Thieves ",
                            PublisherId = "UNREAL",
                            RatingId = "T",
                            TypeId = "RTS"
                        },
                        new
                        {
                            GameId = 45,
                            FormatId = "CONSOLE",
                            GameImage = "smite.png",
                            GenreId = "MOBAs",
                            Name = "Smite",
                            PublisherId = "HIREZ",
                            RatingId = "T",
                            TypeId = "MOBA"
                        },
                        new
                        {
                            GameId = 46,
                            FormatId = "PC",
                            GameImage = "SOMA.png",
                            GenreId = "SURVH",
                            Name = "SOMA",
                            PublisherId = "FRICT",
                            RatingId = "A",
                            TypeId = "SH"
                        },
                        new
                        {
                            GameId = 47,
                            FormatId = "PC",
                            GameImage = "Spellbreak.png",
                            GenreId = "MOBAs",
                            Name = "Spellbreak",
                            PublisherId = "PROLET",
                            RatingId = "E",
                            TypeId = "MOBA"
                        },
                        new
                        {
                            GameId = 48,
                            FormatId = "PC",
                            GameImage = "starcraft.png",
                            GenreId = "RTS",
                            Name = "StarCraft",
                            PublisherId = "BLIZZ",
                            RatingId = "T",
                            TypeId = "FPS"
                        },
                        new
                        {
                            GameId = 49,
                            FormatId = "PC",
                            GameImage = "starcraftlegacy.png",
                            GenreId = "MOBAs",
                            Name = "StarCraft: Legacy of the Void",
                            PublisherId = "BLIZZ",
                            RatingId = "T",
                            TypeId = "MOBA"
                        },
                        new
                        {
                            GameId = 50,
                            FormatId = "PC",
                            GameImage = "strife.png",
                            GenreId = "MOBAs",
                            Name = "Strife",
                            PublisherId = "ROGUE",
                            RatingId = "M",
                            TypeId = "MOBA"
                        },
                        new
                        {
                            GameId = 51,
                            FormatId = "CONSOLE",
                            GameImage = "elder.png",
                            GenreId = "RPG",
                            Name = "The Elder Scrolls",
                            PublisherId = "BETH",
                            RatingId = "T",
                            TypeId = "RTS"
                        },
                        new
                        {
                            GameId = 52,
                            FormatId = "PC",
                            GameImage = "Isle.png",
                            GenreId = "SURVH",
                            Name = "The ISLE",
                            PublisherId = "AFTER",
                            RatingId = "M",
                            TypeId = "SH"
                        },
                        new
                        {
                            GameId = 53,
                            FormatId = "PC",
                            GameImage = "witcher3.png",
                            GenreId = "RPG",
                            Name = "The Witcher 3: Wild Hunt",
                            PublisherId = "CDPR",
                            RatingId = "M",
                            TypeId = "SRPG"
                        },
                        new
                        {
                            GameId = 54,
                            FormatId = "PC",
                            GameImage = "R6S.png",
                            GenreId = "FPS",
                            Name = "TOM CLANCY'S Rainbow Six Siege",
                            PublisherId = "UBI",
                            RatingId = "M",
                            TypeId = "FPS"
                        },
                        new
                        {
                            GameId = 55,
                            FormatId = "CONSOLE",
                            GameImage = "upc.png",
                            GenreId = "SPORT",
                            Name = "UPC 2009 Undisputed",
                            PublisherId = "EA",
                            RatingId = "T",
                            TypeId = "CS"
                        },
                        new
                        {
                            GameId = 56,
                            FormatId = "MOBILE",
                            GameImage = "vain.png",
                            GenreId = "MOBAs",
                            Name = "Vainglory",
                            PublisherId = "SEM",
                            RatingId = "T",
                            TypeId = "MOBA"
                        },
                        new
                        {
                            GameId = 57,
                            FormatId = "PC",
                            GameImage = "Valheim.png",
                            GenreId = "RPG",
                            Name = "Valheim",
                            PublisherId = "UNITY",
                            RatingId = "E",
                            TypeId = "RPG"
                        },
                        new
                        {
                            GameId = 58,
                            FormatId = "PC",
                            GameImage = "Val.png",
                            GenreId = "FPS",
                            Name = "Valorant",
                            PublisherId = "RIOT",
                            RatingId = "M",
                            TypeId = "FPS"
                        },
                        new
                        {
                            GameId = 59,
                            FormatId = "PC",
                            GameImage = "WWB.png",
                            GenreId = "PUZZLE",
                            Name = "We Went Back",
                            PublisherId = "DTG",
                            RatingId = "A",
                            TypeId = "PUZZLE"
                        },
                        new
                        {
                            GameId = 60,
                            FormatId = "CONSOLE",
                            GameImage = "wiisports.png",
                            GenreId = "SPORT",
                            Name = "Wii Sports",
                            PublisherId = "NIN",
                            RatingId = "E",
                            TypeId = "SPORT"
                        },
                        new
                        {
                            GameId = 61,
                            FormatId = "CONSOLE",
                            GameImage = "wolfenstein.png",
                            GenreId = "FPS",
                            Name = "Wolfenstein: The New Order",
                            PublisherId = "BETH",
                            RatingId = "A",
                            TypeId = "FPS"
                        },
                        new
                        {
                            GameId = 62,
                            FormatId = "PC",
                            GameImage = "wow.png",
                            GenreId = "MMORPG",
                            Name = "World of Warcraft",
                            PublisherId = "BLIZZ",
                            RatingId = "T",
                            TypeId = "SRPG"
                        });
                });

            modelBuilder.Entity("ForeverGaming.Models.Genre", b =>
                {
                    b.Property<string>("GenreId")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("GenreId");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            GenreId = "FPS",
                            Name = "First-Person Shooter"
                        },
                        new
                        {
                            GenreId = "MMORPG",
                            Name = "Massively Multiplayer Online Role-Playing Game"
                        },
                        new
                        {
                            GenreId = "MOBAs",
                            Name = "Mobile Online Battle Area"
                        },
                        new
                        {
                            GenreId = "PUZZLE",
                            Name = "Puzzle"
                        },
                        new
                        {
                            GenreId = "RPG",
                            Name = "Role-Playing Game"
                        },
                        new
                        {
                            GenreId = "RTS",
                            Name = "Real-Time Strategy"
                        },
                        new
                        {
                            GenreId = "SIMUL",
                            Name = "Simulation"
                        },
                        new
                        {
                            GenreId = "SPORT",
                            Name = "Sports"
                        },
                        new
                        {
                            GenreId = "STRG",
                            Name = "Strategy"
                        },
                        new
                        {
                            GenreId = "SURV",
                            Name = "Survival "
                        },
                        new
                        {
                            GenreId = "SURVH",
                            Name = "Survival Horror"
                        },
                        new
                        {
                            GenreId = "TFPS",
                            Name = "Tactical First-Person Shooter"
                        });
                });

            modelBuilder.Entity("ForeverGaming.Models.Publisher", b =>
                {
                    b.Property<string>("PublisherId")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("PublisherId");

                    b.ToTable("Publishers");

                    b.HasData(
                        new
                        {
                            PublisherId = "343IND",
                            Name = "343 Ind."
                        },
                        new
                        {
                            PublisherId = "A4GAMES",
                            Name = "A4 Games"
                        },
                        new
                        {
                            PublisherId = "ACT ",
                            Name = "Activision"
                        },
                        new
                        {
                            PublisherId = "AFTER",
                            Name = "Afterthought"
                        },
                        new
                        {
                            PublisherId = "ASOBO",
                            Name = "Asobo Studio"
                        },
                        new
                        {
                            PublisherId = "BLIZZ",
                            Name = "Blizzard Entertainment"
                        },
                        new
                        {
                            PublisherId = "BOHEM",
                            Name = "Bohemia Interactive"
                        },
                        new
                        {
                            PublisherId = "BETH",
                            Name = "Bethesda Softwarks"
                        },
                        new
                        {
                            PublisherId = "BSG",
                            Name = "Battle State Games"
                        },
                        new
                        {
                            PublisherId = "CA ",
                            Name = "Creative Assembly"
                        },
                        new
                        {
                            PublisherId = "CAPCOM",
                            Name = "Capcom"
                        },
                        new
                        {
                            PublisherId = "CDPR",
                            Name = "CD Projekt Red"
                        },
                        new
                        {
                            PublisherId = "CREEP",
                            Name = "Creepy Jar"
                        },
                        new
                        {
                            PublisherId = "DG",
                            Name = "Daybreak Games"
                        },
                        new
                        {
                            PublisherId = "DICE",
                            Name = "DICE"
                        },
                        new
                        {
                            PublisherId = "DTG",
                            Name = "Dead Thread Games"
                        },
                        new
                        {
                            PublisherId = "EA",
                            Name = "Electronic Arts"
                        },
                        new
                        {
                            PublisherId = "EATIB",
                            Name = "EA Tiburon"
                        },
                        new
                        {
                            PublisherId = "EAGLE",
                            Name = "Eagle Dynamics"
                        },
                        new
                        {
                            PublisherId = "ES",
                            Name = "Ensemble Studios"
                        },
                        new
                        {
                            PublisherId = "FRICT",
                            Name = "Frictional Games"
                        },
                        new
                        {
                            PublisherId = "FROST",
                            Name = "Frostburn Studios"
                        },
                        new
                        {
                            PublisherId = "GGG",
                            Name = "Grinding Gear Games"
                        },
                        new
                        {
                            PublisherId = "GARRY",
                            Name = "Garry Newman"
                        },
                        new
                        {
                            PublisherId = "GOOGLE",
                            Name = "Google Play"
                        },
                        new
                        {
                            PublisherId = "HIREZ",
                            Name = "Hi-Rez Studios"
                        },
                        new
                        {
                            PublisherId = "INNER",
                            Name = "InnerSloth"
                        },
                        new
                        {
                            PublisherId = "KINETIC",
                            Name = "Kinetic Games"
                        },
                        new
                        {
                            PublisherId = "MEDIA",
                            Name = "Mediatonic"
                        },
                        new
                        {
                            PublisherId = "MOON",
                            Name = "Moonton"
                        },
                        new
                        {
                            PublisherId = "NIN",
                            Name = "Nintendo"
                        },
                        new
                        {
                            PublisherId = "ORIGIN",
                            Name = "Origin Games"
                        },
                        new
                        {
                            PublisherId = "PLAY",
                            Name = "Playground games"
                        },
                        new
                        {
                            PublisherId = "PROLET",
                            Name = "Proletariat Inc."
                        },
                        new
                        {
                            PublisherId = "QSX",
                            Name = "QuickSilverX"
                        },
                        new
                        {
                            PublisherId = "REDBAR",
                            Name = "Red Barrels"
                        },
                        new
                        {
                            PublisherId = "ROGUE",
                            Name = "Rogue Entertainment"
                        },
                        new
                        {
                            PublisherId = "RIOT",
                            Name = "Riot Games"
                        },
                        new
                        {
                            PublisherId = "ROCK",
                            Name = "RockStar Games"
                        },
                        new
                        {
                            PublisherId = "SEM",
                            Name = "Super Evil Megacorp"
                        },
                        new
                        {
                            PublisherId = "SONY",
                            Name = "Sony Interactive Entertainment"
                        },
                        new
                        {
                            PublisherId = "SOURCE",
                            Name = "Source"
                        },
                        new
                        {
                            PublisherId = "STUN",
                            Name = "Stunlock Studios"
                        },
                        new
                        {
                            PublisherId = "STEAM",
                            Name = "Steam"
                        },
                        new
                        {
                            PublisherId = "TMETA",
                            Name = "The Meta"
                        },
                        new
                        {
                            PublisherId = "TETSUYA",
                            Name = "Tetsuya Nomura"
                        },
                        new
                        {
                            PublisherId = "TREY ",
                            Name = "Treyarch"
                        },
                        new
                        {
                            PublisherId = "TRITER",
                            Name = "Triternion "
                        },
                        new
                        {
                            PublisherId = "TIMI",
                            Name = "TiMi Studios"
                        },
                        new
                        {
                            PublisherId = "UBI",
                            Name = "Ubisoft"
                        },
                        new
                        {
                            PublisherId = "UNITY",
                            Name = "Unity"
                        },
                        new
                        {
                            PublisherId = "UNREAL",
                            Name = "Unreal"
                        },
                        new
                        {
                            PublisherId = "VALVE",
                            Name = "Valve"
                        },
                        new
                        {
                            PublisherId = "VERANT",
                            Name = "Verant Interactive"
                        });
                });

            modelBuilder.Entity("ForeverGaming.Models.Rating", b =>
                {
                    b.Property<string>("RatingId")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("RatingId");

                    b.ToTable("Ratings");

                    b.HasData(
                        new
                        {
                            RatingId = "A",
                            Name = "Adults only 18 and older"
                        },
                        new
                        {
                            RatingId = "M",
                            Name = "Mature 17 and older"
                        },
                        new
                        {
                            RatingId = "T",
                            Name = "Teen"
                        },
                        new
                        {
                            RatingId = "E10",
                            Name = "Everyone 10 and older"
                        },
                        new
                        {
                            RatingId = "E",
                            Name = "Everyone"
                        });
                });

            modelBuilder.Entity("ForeverGaming.Models.Type", b =>
                {
                    b.Property<string>("TypeId")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("TypeId");

                    b.ToTable("Types");

                    b.HasData(
                        new
                        {
                            TypeId = "CB",
                            Name = "City-Building"
                        },
                        new
                        {
                            TypeId = "CS",
                            Name = "Combat Sports"
                        },
                        new
                        {
                            TypeId = "ED",
                            Name = "Educational"
                        },
                        new
                        {
                            TypeId = "EX",
                            Name = "Exercise"
                        },
                        new
                        {
                            TypeId = "FIGHTING",
                            Name = "Fighting"
                        },
                        new
                        {
                            TypeId = "FPS",
                            Name = "First Person Shooter"
                        },
                        new
                        {
                            TypeId = "GS",
                            Name = "Grand Strategy"
                        },
                        new
                        {
                            TypeId = "IM",
                            Name = "Interactive Movie"
                        },
                        new
                        {
                            TypeId = "LS",
                            Name = "Life Sim"
                        },
                        new
                        {
                            TypeId = "MMORPG",
                            Name = "Massively Multiplayer Online Role-Playing Game"
                        },
                        new
                        {
                            TypeId = "MOBA",
                            Name = "Mobile Online Battle Area"
                        },
                        new
                        {
                            TypeId = "PG",
                            Name = "Party Games"
                        },
                        new
                        {
                            TypeId = "PF",
                            Name = "Platformer"
                        },
                        new
                        {
                            TypeId = "PUZZLE",
                            Name = "Puzzle"
                        },
                        new
                        {
                            TypeId = "RACING",
                            Name = "Racing"
                        },
                        new
                        {
                            TypeId = "RTS",
                            Name = "Real Time Strategy"
                        },
                        new
                        {
                            TypeId = "RHYTHM",
                            Name = "Rhythm"
                        },
                        new
                        {
                            TypeId = "RPG",
                            Name = "Role-Play"
                        },
                        new
                        {
                            TypeId = "SRPG",
                            Name = "Sandbox RPGs"
                        },
                        new
                        {
                            TypeId = "SIM",
                            Name = "Simulation"
                        },
                        new
                        {
                            TypeId = "SPORT",
                            Name = "Sport Games"
                        },
                        new
                        {
                            TypeId = "STEALTH",
                            Name = "Stealth"
                        },
                        new
                        {
                            TypeId = "STRATEGY",
                            Name = "Strategy"
                        },
                        new
                        {
                            TypeId = "SURVIVAL",
                            Name = "Survival"
                        },
                        new
                        {
                            TypeId = "SH",
                            Name = "Survival Horror"
                        },
                        new
                        {
                            TypeId = "TFPS",
                            Name = "Tactical FPS"
                        },
                        new
                        {
                            TypeId = "TRP",
                            Name = "Tactical Role-Play"
                        },
                        new
                        {
                            TypeId = "TS",
                            Name = "Team Sports"
                        },
                        new
                        {
                            TypeId = "TEXT",
                            Name = "Text"
                        },
                        new
                        {
                            TypeId = "TD",
                            Name = "Tower Defense"
                        },
                        new
                        {
                            TypeId = "TRIVIA",
                            Name = "Trivia"
                        });
                });

            modelBuilder.Entity("ForeverGaming.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Firstname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lastname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ForeverGaming.Models.Game", b =>
                {
                    b.HasOne("ForeverGaming.Models.Format", "Format")
                        .WithMany("Games")
                        .HasForeignKey("FormatId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ForeverGaming.Models.Genre", "Genre")
                        .WithMany("Games")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ForeverGaming.Models.Publisher", "Publisher")
                        .WithMany("Games")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ForeverGaming.Models.Rating", "Rating")
                        .WithMany("Games")
                        .HasForeignKey("RatingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ForeverGaming.Models.Type", "Type")
                        .WithMany("Games")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ForeverGaming.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ForeverGaming.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ForeverGaming.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ForeverGaming.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
